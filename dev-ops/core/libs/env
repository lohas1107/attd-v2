. ${dev_ops_path}/core/main.env

bin_file=$(basename "$0")

env_path="${dev_ops_path}/envs/${bin_file#env-}"

print_compose() {
	local services_volumes=''
	for service_compose in $(ls "${dev_ops_path}/core/composes/")
	do
		if grep -q ${service_compose} "${env_path}/services.yml"; then
			cat "${dev_ops_path}/core/composes/$service_compose/service.yml"
			if [ -f "${dev_ops_path}/core/composes/$service_compose/volume.yml" ]; then
				services_volumes="$( IFS='\n' 
				while read line
				do
					echo "  $line"
				done < "${dev_ops_path}/core/composes/$service_compose/volume.yml" )"
			fi 
		fi
	done

	cat "${env_path}/services.yml"

	if ! [ "$services_volumes" = "" ]; then
		if ! grep -q "^volumes:" "${env_path}/services.yml"; then
			echo "volumes:"
		fi
		echo "$services_volumes"
	fi
}

create_compose() {
	print_compose > "${env_path}/.docker-compose.yml"
}

check_compose() {
	local services_result="$(print_compose)"
	local exist_compose="$(cat "${env_path}/.docker-compose.yml")"
	if [ "$services_result" = "$exist_compose" ]; then
		return 0
	else
		echo "Docker compose file changed!" >&2
		echo "$services_result" >&2
		return -1
	fi
}

exe_docker_compose() {
	if [ $# = 0 ]; then
		create_compose
	else
		( [ -e "${env_path}/.docker-compose.yml" ] || create_compose ) && \
		check_compose && \
		${DOCKER_SUDO_CMD} docker-compose \
			-f "${env_path}/.docker-compose.yml" \
			--env-file "${env_path}/env" \
			"$@"
	fi
}

if [ "${1}" = ggg ]; then
	shift
	times=1
	while ! exe_docker_compose "$@"
	do
		echo "Retry $((times++)) times..."
	done
else
	exe_docker_compose "$@"
fi

